# Generated by Django 4.2.11 on 2024-06-15 19:37

import core.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import services.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rates', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256, unique=True, verbose_name='Текст')),
            ],
            options={
                'verbose_name': 'Предпочтение выбора',
                'verbose_name_plural': 'Предпочтения выбора',
                'db_table': 'preference',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.CharField(editable=False, max_length=5, primary_key=True, serialize=False, validators=[core.validators.starts_with_uppercase], verbose_name='Уникальный генерируемый идентификатор')),
                ('title', models.CharField(max_length=200, unique_for_date='created_at', validators=[core.validators.starts_with_uppercase], verbose_name='Название')),
                ('description', models.TextField(max_length=1000, unique=True, validators=[core.validators.starts_with_uppercase], verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость услуги')),
                ('image', models.FileField(help_text="Изображение услуги в одном из допустимых форматов ('PNG', 'JPEG', 'JPG') с размером 1000 на 750 пикселей", upload_to='services/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpeg', 'jpg']), services.validators.image_size_validator, services.validators.image_file_size_validator], verbose_name='Изображение')),
                ('created_at', models.DateField(auto_now=True, help_text='Необходимо для ограничения дубликата услуги в один день', verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'db_table': 'service',
                'ordering': ('title', 'price'),
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('code', models.SlugField(help_text='Уникальный идентификатор из латинских символов', max_length=30, primary_key=True, serialize=False, verbose_name='Идентификатор')),
                ('title', models.CharField(max_length=60, unique=True, validators=[core.validators.starts_with_uppercase], verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=500, null=True, unique=True, validators=[core.validators.starts_with_uppercase], verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Тип услуги',
                'verbose_name_plural': 'Типы услуг',
                'db_table': 'service_type',
                'ordering': ('title',),
                'abstract': False,
                'indexes': [models.Index(fields=['title'], name='servicetype_title_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServicePreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services_with_preference', to='services.preference', verbose_name='Предпочтение выбора')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preferences_with_service', to='services.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Предпочтение выбора услуги',
                'verbose_name_plural': 'Предпочтения выбора услуг',
                'db_table': 'service_preferences',
                'ordering': ('-service', 'preference'),
            },
        ),
        migrations.AddField(
            model_name='service',
            name='preferences',
            field=models.ManyToManyField(blank=True, help_text='Не более трёх предпочтений для выбора данной услуги клиентом', related_name='services_from_preference', through='services.ServicePreference', to='services.preference', verbose_name='Предпочтения выбора услуги'),
        ),
        migrations.AddField(
            model_name='service',
            name='rate',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services_from_rate', to='rates.rate', verbose_name='Тариф'),
        ),
        migrations.AddField(
            model_name='service',
            name='type',
            field=models.ForeignKey(db_column='type_code', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services_from_type', to='services.servicetype', verbose_name='Тип'),
        ),
        migrations.AddIndex(
            model_name='servicepreference',
            index=models.Index(fields=['service'], name='service_preferences_idx'),
        ),
        migrations.AddIndex(
            model_name='servicepreference',
            index=models.Index(fields=['preference'], name='preference_services_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicepreference',
            unique_together={('service', 'preference')},
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['title'], name='service_title_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['price'], name='service_price_idx'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('title', 'price'), name='unique_service_with_price'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('title', 'image'), name='unique_service_with_image'),
        ),
    ]

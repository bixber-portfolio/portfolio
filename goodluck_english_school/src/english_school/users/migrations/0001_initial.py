# Generated by Django 4.2.11 on 2024-06-15 19:37

import core.validators
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'Такой логин уже занят другим пользователем!'}, help_text='Обязательное поле. Не более 100 символов. Можно использовать алфавит латиницы, цифры и символы @/./+/-/', max_length=100, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Логин')),
                ('password', models.CharField(max_length=150, verbose_name='Пароль')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже зарегистрирован!'}, max_length=254, unique=True, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': ('Пользователь с таким номером телефона уже зарегистрирован!',)}, max_length=15, null=True, unique=True, verbose_name='Номер телефона')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='Последний IP-адрес входа в систему', null=True, protocol='ipv4', verbose_name='IP-адрес клиента')),
                ('last_login', models.DateTimeField(blank=True, help_text='Дата и время последнего входа.', null=True, verbose_name='Последний вход')),
                ('role', models.SlugField(choices=[(None, 'Выберите Вашу роль:'), ('student', 'Студент'), ('teacher', 'Преподаватель')], help_text='Роль пользователя в системе.', max_length=30, verbose_name='Роль')),
                ('first_name', models.CharField(max_length=100, validators=[core.validators.starts_with_uppercase], verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, validators=[core.validators.starts_with_uppercase], verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, help_text='При наличии', max_length=100, null=True, validators=[core.validators.starts_with_uppercase], verbose_name='Отчество')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Статус персонала')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_news_sub', models.BooleanField(default=False, help_text='Указывает, получает ли пользователь новостную рассылку на электронную почту.', verbose_name='Подписка на рассылку')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время регистрации.', verbose_name='Регистрация')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'user',
                'ordering': ['-date_joined'],
                'indexes': [models.Index(fields=['-date_joined', 'last_login'], name='activity_idx')],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
